secrets:
  secrets_env:
    file: .env

services:

  db-user:
    image: postgres
    container_name: db-user-session
    restart: always
    shm_size: 128mb
    environment:
      POSTGRES_USER: "${USER_SESSION_POSTGRES_USER}"
      POSTGRES_PASSWORD: "${USER_SESSION_POSTGRES_PASSWORD}"
      POSTGRES_DB: "${USER_SESSION_POSTGRES_DB}"
    volumes:
      - user-db-data:/var/lib/postgresql/data
    secrets:
      - secrets_env

  user-session-migrate:
    image: python:3.11
    container_name: user-session-migrate
    command: sh -c "pip install -r requirements.txt && python manage.py migrate"
    working_dir: /app
    environment:
      DB_NAME: "${USER_SESSION_POSTGRES_DB}"
      DB_USER: "${USER_SESSION_POSTGRES_USER}"
      DB_PASSWORD: "${USER_SESSION_POSTGRES_PASSWORD}"
      DB_HOST: "db-user-session"
      DB_PORT: "5432"
    volumes:
      - user-session-dev:/app
    depends_on: 
      - db-user

  user-session:
    image: python:3.11
    container_name: user-session
    command: sh -c "pip install -r requirements.txt && uvicorn session.asgi:application --host 0.0.0.0 --port 8002 --reload"
    working_dir: /app
    volumes:
      - user-session-dev:/app
    environment:
      DB_NAME: "${USER_SESSION_POSTGRES_DB}"
      DB_USER: "${USER_SESSION_POSTGRES_USER}"
      DB_PASSWORD: "${USER_SESSION_POSTGRES_PASSWORD}"
      DB_HOST: "db-user-session"
      DB_PORT: "5432"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
    depends_on:
      - user-session-migrate
      - db-user
      - redis

  game-sync-session-worker:
    image: python:3.11
    container_name: game-sync-session-worker
    command: sh -c "pip install -r requirements.txt && python manage.py game_integration"
    working_dir: /app
    volumes:
      - user-session-dev:/app
    environment:
      DB_NAME: "${USER_SESSION_POSTGRES_DB}"
      DB_USER: "${USER_SESSION_POSTGRES_USER}"
      DB_PASSWORD: "${USER_SESSION_POSTGRES_PASSWORD}"
      DB_HOST: "db-user-session"
      DB_PORT: "5432"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
    depends_on:
      - user-session
      - redis

  db-game:
    image: postgres
    container_name: db-game-core
    restart: always
    shm_size: 128mb
    environment:
      POSTGRES_USER: "${CORE_GAME_POSTGRES_USER}"
      POSTGRES_PASSWORD: "${CORE_GAME_POSTGRES_PASSWORD}"
      POSTGRES_DB: "${CORE_GAME_POSTGRES_DB}"
    volumes:
      - game-db-data:/var/lib/postgresql/data
    secrets:
      - secrets_env

  game-core-migrate:
    image: python:3.11
    container_name: game-core-migrate
    command: sh -c "pip install -r requirements.txt && python manage.py migrate"
    working_dir: /app
    environment:
      DB_NAME: "${CORE_GAME_POSTGRES_DB}"
      DB_USER: "${CORE_GAME_POSTGRES_USER}"
      DB_PASSWORD: "${CORE_GAME_POSTGRES_PASSWORD}"
      DB_HOST: "db-game-core"
      DB_PORT: "5432"
    volumes:
      - game-core-dev:/app
    depends_on: 
      - db-game

  game-core:
    image: python:3.11
    container_name: game-core
    command: sh -c "pip install -r requirements.txt && uvicorn game_project.asgi:application --host 0.0.0.0 --port 8001 --reload"
    working_dir: /app
    volumes:
      - game-core-dev:/app
    environment:
      DB_NAME: "${CORE_GAME_POSTGRES_DB}"
      DB_USER: "${CORE_GAME_POSTGRES_USER}"
      DB_PASSWORD: "${CORE_GAME_POSTGRES_PASSWORD}"
      DB_HOST: "db-game-core"
      DB_PORT: "5432"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
    depends_on:
      - db-game

  game-worker:
    image: python:3.11
    container_name: game-worker
    command: sh -c "pip install -r requirements.txt && python manage.py session_worker"
    working_dir: /app
    volumes:
      - game-core-dev:/app
    environment:
      DB_NAME: "${CORE_GAME_POSTGRES_DB}"
      DB_USER: "${CORE_GAME_POSTGRES_USER}"
      DB_PASSWORD: "${CORE_GAME_POSTGRES_PASSWORD}"
      DB_HOST: "db-game-core"
      DB_PORT: "5432"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
    depends_on:
      - game-core
      - redis

  nginx:
    build:
      context: load-balance/nginx/
    image: game-front-end:latest
    container_name: game-front-end
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - front-end-dev:/usr/share/nginx/html
    depends_on:
      - game-core
      - user-session
  
  redis:
    image: "redis:latest"

  prometheus:
    image: prom/prometheus:v2.52.0 # Imagem oficial do Prometheus
    container_name: prometheus_server
    ports:
      - "9090:9090" # Mapeia a porta 9090 do host para a porta 9090 do contêiner
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml # Monta o arquivo de configuração
      - prometheus_data:/prometheus # Monta um volume para persistir os dados do Prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped # Reinicia automaticamente a menos que seja parado manualmente

  grafana:
    image: grafana/grafana:11.0.0 # Imagem oficial do Grafana
    container_name: grafana_server
    ports:
      - "3000:3000" # Mapeia a porta 3000 do host para a porta 3000 do contêiner
    volumes:
      - grafana_data:/var/lib/grafana # Monta um volume para persistir os dados do Grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/ # Monta as configurações de provisionamento
    environment: # Variáveis de ambiente para o Grafana
      - GF_SECURITY_ADMIN_USER=admin # Usuário admin padrão
      - GF_SECURITY_ADMIN_PASSWORD=admin # Senha admin padrão (MUDAR EM PRODUÇÃO!)
      - GF_USERS_ALLOW_SIGN_UP=false # Desabilita o registro de novos usuários
    depends_on: # Garante que o Prometheus seja iniciado antes do Grafana
      - prometheus
    restart: unless-stopped

  # Opcional: Adicionar um Node Exporter para monitorar o host Docker
  nodeexporter:
    image: prom/node-exporter:v1.8.1 # Imagem oficial do Node Exporter
    container_name: node_exporter_host
    ports:
      - "9100:9100" # Mapeia a porta 9100 do host para a porta 9100 do contêiner
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/host/rootfs'
    restart: unless-stopped

volumes:
  prometheus_data:
  grafana_data:
  game-core-dev:
    name: game-core-dev
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /goinfre/game-core-dev

  user-session-dev:
    name: user-session-dev
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /goinfre/user-session-dev

  front-end-dev:
    name: front-end-dev
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /goinfre/front-end-dev

  game-db-data:
    name: game-db-data
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /goinfre/game-db-data

  user-db-data:
    name: user-db-data
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /goinfre/user-db-data
